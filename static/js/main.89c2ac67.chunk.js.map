{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","datebuilder","Date","Math","round","temp_max","temp_min","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAEMA,EACC,mCADDA,EAEC,2CAgEQC,MA7Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAuBA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAyBH,EAAQG,KAAKC,KAAQ,GAAK,WAAa,MAAS,SAAzG,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACCG,KAAK,OACLH,UAAU,aACVI,YAAY,oBACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WA/BM,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAwBG,EAAxB,+BAAoDH,IAAWoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC/FjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA8Ba,oBAAhBlB,EAAQG,KACjB,sBAAKD,UAAU,MAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SA7BU,SAACsB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoBHE,CAAY,IAAIC,WAGzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAA/C,YACA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,OAC7C,sBAAKD,UAAU,OAAf,UACE,sBAAKA,UAAU,OAAf,mBAA6BiC,KAAKC,MAAMpC,EAAQG,KAAKkC,aACrD,sBAAKnC,UAAU,MAAf,kBAA2BiC,KAAKC,MAAMpC,EAAQG,KAAKmC,sBAInD,SClDGC,EAZO,SAAAC,GAChBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDhBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.89c2ac67.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react';\nconst api = {\n  key: \"4a288f282057e7ae0d3cd3260b688554\",\n  url: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if(evt.key === \"Enter\"){\n      fetch(`${api.url}weather?q=${query}&units=metric&APPID=${api.key}`).then(res => res.json()).then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      })\n    }\n  }\n\n  const datebuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()]\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp) < 24 ? 'App cold' : 'App') : 'App Ok'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n           type=\"text\"\n           className=\"search-bar\"\n           placeholder=\"Search City/State\"\n           onChange={e => setQuery(e.target.value)}\n           value={query}\n           onKeyPress={search}\n           />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n        <div className=\"all\">\n          <div className=\"location-box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{datebuilder(new Date())}</div>\n          </div>\n\n          <div className=\"weather-box\">\n            <div className=\"temp\">{Math.round(weather.main.temp)}Â° C</div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n            <div className=\"more\">\n              <div className=\"high\">High: {Math.round(weather.main.temp_max)}</div>\n              <div className=\"low\">Low: {Math.round(weather.main.temp_min)}</div>\n            </div>\n          </div>\n        </div>\n        ) :  ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}